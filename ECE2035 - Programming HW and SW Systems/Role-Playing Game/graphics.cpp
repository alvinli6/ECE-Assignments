#include "graphics.h"

#include "globals.h"

const char blue[121] = {
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 
'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B'
};

const char ladder[121] = 
{
'8', '8', '9', '8', '8', '8', '8', '8', '9', '8', '8', 
'8', '8', '9', '9', '9', '9', '9', '9', '9', '8', '8', 
'8', '8', '9', '8', '8', '8', '8', '8', '9', '8', '8', 
'8', '8', '9', '9', '9', '9', '9', '9', '9', '8', '8', 
'8', '8', '9', '8', '8', '8', '8', '8', '9', '8', '8', 
'8', '8', '9', '9', '9', '9', '9', '9', '9', '8', '8', 
'8', '8', '9', '8', '8', '8', '8', '8', '9', '8', '8', 
'8', '8', '9', '9', '9', '9', '9', '9', '9', '8', '8', 
'8', '8', '9', '8', '8', '8', '8', '8', '9', '8', '8', 
'8', '8', '9', '9', '9', '9', '9', '9', '9', '8', '8', 
'8', '8', '9', '8', '8', '8', '8', '8', '9', '8', '8'
};

const char radar[121] = {
'2', '2', '2', '2', 'C', 'C', 'C', '2', '2', '2', '2', 
'2', '2', '2', 'C', 'C', 'C', 'C', 'C', '2', '2', '2', 
'2', '2', 'C', 'C', 'C', 'C', '1', 'C', 'C', '2', '2', 
'2', 'C', 'C', 'C', '1', 'C', 'C', 'C', 'C', 'C', '2', 
'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 
'C', 'C', '1', 'C', 'C', '1', 'C', '1', 'C', 'C', 'C', 
'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 
'2', 'C', 'C', '1', 'C', 'C', 'C', 'C', 'C', 'C', '2', 
'2', '2', 'C', 'C', 'C', 'C', '1', 'C', 'C', '2', '2', 
'2', '2', '2', 'C', 'C', 'C', 'C', 'C', '2', '2', '2', 
'2', '2', '2', '2', 'C', 'C', 'C', '2', '2', '2', '2'
};

const char Goku[121] = {
'q', 'q', 'q', 'q', 'q', 'w', 'w', 'w', 'w', 'q', 'q', 
'q', 'q', 'q', 'w', 'w', 'w', 'w', 'w', 'q', 'q', 'q', 
'q', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 'w', 
'q', 'q', 'w', 'w', 'e', 'w', 'w', 'w', 'w', 'w', 'q', 
'q', 'w', 'w', 'e', 'w', 'e', 'e', 'w', 'e', 'w', 'w', 
'q', 'q', 'q', 'e', 'e', 'e', 'e', 'e', 'e', 'q', 'q', 
'q', 'q', 'q', 'q', 'e', 'e', 'e', 'e', 'q', 'q', 'q', 
'q', 'q', 'q', 't', 'z', 'w', 'w', 'z', 't', 'q', 'q', 
'q', 'q', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'q', 
'q', 'q', 'e', 'q', 'z', 't', 't', 'z', 'q', 'e', 'q', 
'q', 'q', 'q', 'q', 't', 'q', 'q', 't', 'q', 'q', 'q'
};

const char One[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'2', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', '2', 
'2', '2', 'z', 'z', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Two[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'2', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', '2', 
'2', '2', 'z', 'z', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Three[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'2', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', '2', 
'2', '2', 'z', 'z', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Four[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', '2', 
'2', '2', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Five[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'p', 'p', 'z', 'p', 'p', 'z', 'z', 
'z', 'p', 'p', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', '2', 
'2', '2', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Six[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'p', 'p', 'z', 'p', 'p', 'z', 'z', 
'z', 'p', 'p', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 
'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 
'2', 'z', 'p', 'p', 'z', 'z', 'p', 'p', 'z', 'z', '2', 
'2', '2', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Seven1[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'p', 'p', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 
'z', 'p', 'p', 'z', 'p', 'p', 'z', 'z', 'z', 'p', 'p', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 
'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 
'2', 'z', 'p', 'p', 'z', 'z', 'p', 'p', 'z', 'z', '2', 
'2', '2', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Seven2[121] = {
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2', 
'2', '2', 'z', 'p', 'p', 'z', 'z', 'z', 'z', '2', '2', 
'2', 'z', 'z', 'p', 'p', 'z', 'z', 'p', 'p', 'z', '2', 
'z', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 
'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 
'z', 'p', 'p', 'z', 'p', 'p', 'z', 'z', 'z', 'p', 'p', 
'z', 'p', 'p', 'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 
'z', 'z', 'z', 'z', 'z', 'z', 'p', 'p', 'z', 'z', 'z', 
'2', 'z', 'p', 'p', 'z', 'z', 'p', 'p', 'z', 'z', '2', 
'2', '2', 'p', 'p', 'z', 'z', 'z', 'z', 'z', '2', '2', 
'2', '2', '2', 'z', 'z', 'z', 'z', 'z', '2', '2', '2'
};

const char Tree[121] = 
{
'2', '2', '2', 'g', 'g', 'g', 'g', '2', '2', '2', '2', 
'2', '2', 'g', 'g', 'g', 'g', 'g', 'g', '2', '2', '2', 
'2', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '2', '2', 
'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', '2', 
'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 
'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 'g', 
'2', 'g', 'g', 'g', 'h', 'h', 'h', 'g', 'g', 'g', '2', 
'2', '2', '2', '2', 'h', 'h', 'h', '2', '2', '2', '2', 
'2', '2', '2', '2', 'h', 'h', 'h', '2', '2', '2', '2', 
'2', '2', '2', 'h', 'h', 'h', 'h', 'h', '2', '2', '2', 
'2', '2', 'h', 'h', 'h', 'h', 'h', 'h', 'h', '2', '2'
};

const char GodMode[121] = {
'q', 'q', 'q', 'q', 'q', 'Y', 'Y', 'Y', 'Y', 'q', 'q', 
'q', 'q', 'q', 'Y', 'Y', 'Y', 'Y', 'Y', 'q', 'q', 'q', 
'q', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 
'q', 'q', 'Y', 'Y', 'e', 'Y', 'Y', 'Y', 'Y', 'Y', 'q', 
'q', 'Y', 'Y', 'e', 'Y', 'e', 'e', 'Y', 'e', 'Y', 'Y', 
'q', 'q', 'q', 'e', 'e', 'e', 'e', 'e', 'e', 'q', 'q', 
'q', 'q', 'q', 'q', 'e', 'e', 'e', 'e', 'q', 'q', 'q', 
'q', 'q', 'q', 't', 'z', 'w', 'w', 'z', 't', 'q', 'q', 
'q', 'q', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'z', 'q', 
'q', 'q', 'e', 'q', 'z', 't', 't', 'z', 'q', 'e', 'q', 
'q', 'q', 'q', 'q', 't', 'q', 'q', 't', 'q', 'q', 'q'
};

const char lava[121] = {
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', 'p', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', 'p', 'p', 'p', '2', '2', '2', '2', 
'2', '2', 'p', '2', 'p', 'p', 'p', '2', 'p', '2', '2', 
'2', '2', 'p', 't', 'p', 't', 'p', 't', 'p', '2', '2', 
'p', '2', 'p', 'p', 'p', 't', 'p', 'p', 'p', '2', 'p', 
'p', 'p', 't', 'p', 't', 't', 't', 'p', 't', 'p', 'p', 
'2', 'p', 'p', 'p', 't', 'Y', 't', 'p', 'p', 'p', '2', 
'p', 't', 'p', 't', 't', 'Y', 't', 't', 'p', 't', 'p', 
'p', 'p', 'p', 't', 'Y', 'Y', 'Y', 't', 'p', 'p', 'p', 
't', 'p', 'p', 't', 'Y', 'Y', 'Y', 't', 'p', 'p', 't'
};

const char Frieza[121] = {
'2', '2', '2', '2', 'f', 'f', 'f', '2', '2', '2', '2', 
'2', '2', '2', 'f', 'f', 'f', 'f', 'f', '2', '2', '2', 
'2', '2', '2', 'm', 'f', 'f', 'f', 'm', '2', '2', '2', 
'2', '2', 'm', 'm', 'w', 'm', 'w', 'm', 'm', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', 'm', 'm', '2', '2', '2', 
'2', '2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', 'm', 'm', '2', '2', '2', 
'2', '2', 'm', '2', 'm', 'f', 'm', '2', 'm', '2', '2', 
'2', '2', 'f', '2', 'm', 'm', 'm', '2', 'f', '2', '2', 
'2', '2', '2', '2', 'm', '2', 'm', '2', '2', '2', '2'
};

const char Beam[121] = {
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 
'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 
'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2'
};

const char Sword[121] = {
'2', '2', '2', '2', '2', '2', '2', '2', '2', '[', '[', 
'2', '2', '2', '2', '2', '2', '2', '2', '[', '[', '[', 
'2', '2', '2', '2', '2', '2', '2', '[', '[', '[', '2', 
'2', '2', '2', '2', '2', '2', '[', '[', '[', '2', '2', 
'2', '2', '2', '2', '2', '[', '[', '[', '2', '2', '2', 
'2', '2', '2', '2', '[', '[', '[', '2', '2', '2', '2', 
'[', '2', '2', '[', '[', '[', '2', '2', '2', '2', '2', 
'2', '[', '[', '[', '[', '2', '2', '2', '2', '2', '2', 
'2', ']', ']', '[', '2', '2', '2', '2', '2', '2', '2', 
']', ']', ']', '[', '2', '2', '2', '2', '2', '2', '2', 
']', ']', '2', '2', '[', '2', '2', '2', '2', '2', '2'
};

const char Exclamation[121] = {
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'm', 'm', '2', '2', '2', '2', '2'
};

const char Sparkle[121] = {
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', 'Y', 'Y', 'Y', '2', '2', '2', '2', 
'2', '2', '2', '2', 'Y', 'Y', 'Y', '2', '2', '2', '2', 
'2', '2', '2', '2', 'Y', 'Y', 'Y', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2'
};

const char Treasure[121] = {
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', 'Y', '2', '2', '2', '2', '2', '2', '2', 'Y', '2', 
'2', '2', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '2', '2', 
'2', '2', 'Y', 'D', 'D', 'D', 'D', 'D', 'Y', '2', '2', 
'2', '2', 'Y', 'D', 'D', 'D', 'D', 'D', 'Y', '2', '2', 
'2', '2', 'Y', 'D', 'D', 'D', 'D', 'D', 'Y', '2', '2', 
'2', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '2', 
'2', 'Y', 'Y', '2', '2', '2', '2', '2', 'Y', 'Y', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', 
'2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2'
};

const char Piccolo[121] = {
'2', '2', '2', '2', 'm', 'f', 'm', '2', '2', '2', '2', 
'2', '2', '2', 'm', 'f', 'f', 'f', 'm', '2', '2', '2', 
'2', '2', 'C', 'f', 'f', 'f', 'f', 'f', 'C', '2', '2', 
'2', '2', 'C', 'C', 'C', 'C', 'C', 'C', 'C', '2', '2', 
'2', '2', '2', 'C', '2', 'C', '2', 'C', '2', '2', '2', 
'2', '2', '2', 'C', 'C', 'C', 'C', 'C', '2', '2', '2', 
'2', '2', '2', '2', 'C', 'C', 'C', '2', '2', '2', '2', 
'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 
'2', 'C', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'C', '2', 
'2', 'C', '2', 'f', 'f', 'f', 'f', 'f', '2', 'C', '2', 
'2', 'C', '2', 'f', 'f', 'f', 'f', 'f', '2', 'C', '2'
};

void draw_player(int u, int v, int key)
{
    //uLCD.filled_rectangle(u, v, u+11, v+11, RED);
    draw_img(u, v, Goku);
}

void draw_GodMode(int u, int v, int key)
{
    //uLCD.filled_rectangle(u, v, u+11, v+11, RED);
    draw_img(u, v, GodMode);
}

#define YELLOW 0xFFFF00
#define BROWN  0xD2691E
#define DIRT   BROWN
#define CBLUE  0xfff52400
#define CDGRAY 0xff4a4a4a
#define CLGRAY 0xff8f8f8f
#define CGREEN  0xff00ff00
#define CYELLOW 0xff3bffff
#define CBLACK  0x00000000
#define GGRAY   0xff666666
#define GBLACK  0xff000000
#define GSKIN   0xffffbaac
#define GORANGE 0xffef0000
#define GBLUE   0xff007cff
#define BALLRED 0xff0700ff
#define BLORANGE  0xffff9807
#define TreeG   0xff00f400
#define TreeBr  0xff770000
#define FPURPLE 0xffff00ff
#define FWHITE  0xffffffff
#define BEAM    0xff1d4fff
#define SWORD   0xffd6d3d6
#define HILT    0xff0000ff
void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'p') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        else if (img[i] == '5') colors[i] = LGREY;
        else if (img[i] == '3') colors[i] = DGREY;
        else if (img[i] == 'B') colors[i] = CBLUE;
        else if (img[i] == '8') colors[i] = CDGRAY;
        else if (img[i] == '9') colors[i] = CLGRAY;
        else if (img[i] == 'C') colors[i] = CGREEN;
        else if (img[i] == '1') colors[i] = CYELLOW;
        else if (img[i] == '2') colors[i] = CBLACK;
        else if (img[i] == 'q') colors[i] = GGRAY;
        else if (img[i] == 'w') colors[i] = GBLACK;
        else if (img[i] == 'e') colors[i] = GSKIN;
        else if (img[i] == 'r') colors[i] = GORANGE;
        else if (img[i] == 't') colors[i] = GBLUE;
        else if (img[i] == 'y') colors[i] = BALLRED;
        else if (img[i] == 'z') colors[i] = BLORANGE;
        else if (img[i] == 'g') colors[i] = TreeG;
        else if (img[i] == 'h') colors[i] = TreeBr;
        else if (img[i] == 'f') colors[i] = FPURPLE;
        else if (img[i] == 'm') colors[i] = FWHITE;
        else if (img[i] == 'a') colors[i] = BEAM;
        else if (img[i] == '[') colors[i] = SWORD;
        else if (img[i] == ']') colors[i] = HILT;
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}

void draw_nothing(int u, int v)
{
    // Fill a tile with blackness
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
}


void draw_wall(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, LGREY);
}

void draw_lava(int u, int v)
{
    draw_img(u, v, lava);   
}

void draw_Piccolo(int u, int v)
{
    draw_img(u, v, Piccolo);   
}

void draw_Treasure(int u, int v)
{
    draw_img(u, v, Treasure);   
}

void draw_Sparkle(int u, int v)
{
    draw_img(u, v, Sparkle);   
}

void draw_Exclamation(int u, int v)
{
    draw_img(u, v, Exclamation);   
}

void draw_Sword(int u, int v)
{
    draw_img(u, v, Sword);   
}

void draw_Beam(int u, int v)
{
    draw_img(u, v, Beam);
}

void draw_Frieza(int u, int v)
{
    draw_img(u, v, Frieza);
}

void draw_plant(int u, int v)
{
    draw_img(u, v, Tree);
}

void draw_NPC1(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, BLUE);
}

void draw_ladder(int u, int v)
{
    draw_img(u, v, ladder);
}

void draw_radar(int u, int v)
{
    draw_img(u, v, radar);
}

void draw_One(int u, int v)
{
    draw_img(u, v, One);  
}

void draw_Two(int u, int v)
{
    draw_img(u, v, Two);  
}

void draw_Three(int u, int v)
{
    draw_img(u, v, Three);  
}

void draw_Four(int u, int v)
{
    draw_img(u, v, Four);  
}

void draw_Five(int u, int v)
{
    draw_img(u, v, Five);  
}

void draw_Six(int u, int v)
{
    draw_img(u, v, Six);  
}

void draw_Seven1(int u, int v)
{
    draw_img(u, v, Seven1);  
}

void draw_Seven2(int u, int v)
{
    draw_img(u, v, Seven2);  
}

void draw_upper_status()
{
    // Draw bottom border of status bar
    uLCD.line(0, 9, 127, 9, GREEN);
    
    // Add other status info drawing code here
}

void draw_lower_status()
{
    // Draw top border of status bar
    uLCD.line(0, 118, 127, 118, GREEN);
    
    // Add other status info drawing code here
}

void draw_border()
{
    uLCD.filled_rectangle(0,     9, 127,  14, WHITE); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, WHITE); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, WHITE); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, WHITE); // Right
}


